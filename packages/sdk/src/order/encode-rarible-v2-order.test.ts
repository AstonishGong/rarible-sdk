import { createGanacheProvider } from "@rarible/ethereum-sdk-test-common"
import Web3 from "web3"
import { Web3Ethereum } from "@rarible/web3-ethereum"
import { toBigNumber, ZERO_ADDRESS, ZERO_WORD } from "@rarible/types"
import type { EthereumConfig } from "../config/type"
import { getEthereumConfig } from "../config"
import { encodeRaribleV2OrderAndSignature } from "./encode-rarible-v2-order"
import type { SimpleOrder } from "./types"
import { orderToStruct, signOrder } from "./sign-order"

describe("test encodeRaribleV2OrderAndSignature function", () => {
	const { addresses, provider } = createGanacheProvider()
	const [senderAddress] = addresses
	const web3 = new Web3(provider as any)
	const ethereum = new Web3Ethereum({ web3, from: senderAddress, gas: 1000000 })
	const config: EthereumConfig = getEthereumConfig("e2e")
	const order: SimpleOrder = {
		make: {
			assetType: {
				assetClass: "ERC1155",
				contract: ZERO_ADDRESS,
				tokenId: toBigNumber("1"),
			},
			value: toBigNumber("5"),
		},
		maker: ZERO_ADDRESS,
		taker: ZERO_ADDRESS,
		take: {
			assetType: {
				assetClass: "ETH",
			},
			value: toBigNumber("1000000"),
		},
		salt: ZERO_WORD,
		type: "RARIBLE_V2",
		start: 0,
		end: 0,
		data: {
			dataType: "RARIBLE_V2_DATA_V1",
			payouts: [],
			originFees: [],
		},
	}
	test("Should encode order with signature", async () => {
		const preparedOrder = orderToStruct(ethereum, order)
		const signature = await signOrder(ethereum, config, order)
		const encoded = encodeRaribleV2OrderAndSignature(ethereum, preparedOrder, signature )

		const expected = "0x000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000003a000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000120000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000004c2342660000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002a000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000005973bb640000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000f4240aaaebeba000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000a0000000000000000000000000000000000000000000000000000000000000002000000000000000000000000000000000000000000000000000000000000000400000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000041"
		+ signature.slice(2)
		+ "00000000000000000000000000000000000000000000000000000000000000"
		expect(encoded).toEqual(expected)
	})
})
